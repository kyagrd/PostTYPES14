====================================
== Feedback from Ralph Matthes    ==
====================================

Dear Ki Yung,

Two weeks have passed, and the deadline for TYPES'14 is now very close (although certainly a bit extensible on demand). After a two-day project meeting that I organised, I could finally take a look. While I did not yet try to solve the question you were particularly interested in, I can propose a clean general solution for Section 5, i.e., the impredicative encoding of Mendler-style iteration with static inverse. The definition of In'_* will certainly have to analyze the datatype functor F, but this could be done just the way I did it for positive and negative occurrences in my PTCS 2001 paper. There is no need to explicitly mark negative occurrences (which you sketch on p.17 for another purpose).

@inproceedings{DBLP:conf/dagstuhl/Matthes01,
  author    = {Ralph Matthes},
  title     = {Interpolation for Natural Deduction with Generalized Eliminations},
  booktitle = {Proof Theory in Computer Science, International Seminar, {PTCS} 2001,
               Dagstuhl Castle, Germany, October 7-12, 2001, Proceedings},
  year      = {2001},
  pages     = {153--169},
  crossref  = {DBLP:conf/dagstuhl/2001ptcs},
  url       = {http://dx.doi.org/10.1007/3-540-45504-3_10},
  doi       = {10.1007/3-540-45504-3_10},
  timestamp = {Fri, 12 Sep 2014 15:07:21 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/dagstuhl/Matthes01},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

I tried it out on your example of HOAS. I think this would make it easy to lift the discussion in 5.3 and 5.4 to the level of results. If it was just about giving a definition and no analysis of its behaviour, it would be sufficient to say that lift phi' and inl form a logical equivalence  and that all type constructors preserve logical equivalence, allowing thus to pass from the type of argument x to the type F(KA) needed as argument of phi' eta^-1.

What do you think? Maybe your paper has very much changed since I downloaded it on September 2 (perhaps, you even had already modified your version by then).

Best,    Ralph



====================================
=== Reviews from post-TYPES '14 ====
====================================

----------------------- REVIEW 1 ---------------------
PAPER: 3
TITLE: Mendler-style recursion schemes for mixed-variant datatypes
AUTHORS: Ki Yung Ahn, Tim Sheard and Marcelo Fiore


----------- REVIEW -----------
The goal of the paper is to extend Mendler-style recursive types to definition with negative occurrences of the recursive type parameter.
The usefulness of the device is illustrated by the application to Higher Order Abstract Syntax encoding of untyped and simply typed lambda-calculus.

Usually, such higher order syntax representations have the problem of instantiating binding terms (given by metafunctions on expression). The trick used here is to introduce a formal inverse constructor that inject all possible value of recursive functions into the term algebra. This result type is polymorphically abstracted, therefore it is impossible for the user to actually employ the inverse constructor to define concrete terms. The inverse can instead be used at the moment of evaluating a term to obtain a result in that type.

It is a nice idea and it seems to provide elegant formalizations.
Following the technical details is a bit challenging in some points, so I would like the authors to provide more clear intuitive explanations.

The main device in defining Mendler type inductive types for type operator with negative occurrences is a constructor "Inverse" that injects the result values of recursive functions into the type. This is reflected in the type Phi' of the recursion step, which has an extra component (a -> r a). However, when we look at the implementation of msfit, we see that this is always instantiated by Inverse. So I don't see the need to generalize it in Phi'. You can just leave it out and let the user directly employ Inverse in the definition of phi.

I feel that the role of this formal inverse must be clarified further. On pg.6, the sentence beginning "Instead of using actual inverse functions ..." is not clear. It seem to implicitly assume that inverse functions exists: one can always recompute the element of the recursive type from the result of the recursive function, which is obviously false. With the formal inverse, we force the existence of a left inverse of every recursive function. As the example illustrates, this allows us to provide trivial instantiations for negative occurrences of the the type variable in the inductive definition.

It should be stressed, maybe in relation to the example from Listing 3, how the introduction of inverse helps. Traditionally, we could add a new constructor Var for terms that consists of a single variable occurrence. However, this would require defining non-capturing substitution, abstraction of a variable name and so on, spoiling the very principle of HOAS. The trick in the paper is similar but generalized: since the result type a is quantified, it's actually not possible to use Inverse to create variable terms; instead it can use only "on the fly" to create local terms in the recursion.

One illustration of the power of the recursion scheme on datatypes with formal inverse is the definition of a function eval that evaluates a formal expression to a value in the meta-language. Even more interesting would be a normalization function on the same lines, in the spirit of "normalization by evaluation" techniques. If the authors could do this, it would had strength to their claims.

Section 4 proves (in the case of the untyped lambda-calculus) that expressions obtained by the operator mu' are contained in those obtained by mu. The viceversa may not be possible. There should be a better clarification of the origin of this problem. At first one may notice that mu' has the same constructors as mu plus the formal inverse, so one would expect the injection to be possible. But since we are in the presence of negative occurrences of the recursive type variable, lambda expressions can be formed on a more restrictive set of functions.

Section 5 shows how to embed Mendler style recursive types into F-omega, first the simple mu* operator, then the operator mu*' with formal inverses. In this second case, the embedding has to be done case by case for each specific data structure. I admit that I could not check the specific details of this part of the paper.

The later section 7 talks about ongoing work on the extension of Mendler-style recursion with sized indices and to parametric iteration. It lacks an initial explanation of these concepts and some motivation. Personally I would prefer this part to be left out (and published when it is fully developed) and instead see more detailed and intuitive explanations of the main part of the article.

In conclusion, I find the article to contain and interesting and elegant new idea that is developed in a technically skillful and effective way. I find that the style can be improved by deeper explanation of the core concepts, but overall I give it a positive assessment.

MINOR COMMENTS AND TYPOS

Section 1:

The very first sentence is a bit difficult to parse. Instead of "coin", the correct verb to use is "name" or "baptize". Alternatively reformulate: "they (Uustalu, Matthes, and others) coined the term Mendler style for this new way of formulating recursion schemes and called conventional style the previously prevalent approach". Also, if you use italics for "Mendler style", also use them for "conventional style".

In the second paragraph "They gave a semi-formal termination proof ...", it's not clear who "they" are. Since they are two of the authors of the present paper, it's clearer to write "We, in that article, ...".

"beloved" -> "believed"

Section 2:

There is an abandoned "and" between two commas: delete the second comma.

The last paragraph, explaining Mendler style, is a bit obscure and, in my opinion, would not be understood by someone not already familiar with it. It is not clear what "abstract operations" refers to. It would be better understandable if you say that the constructors of the recursive types are given by the functor f, the recursive type is formalized as a fixed point of f, and iteration is realized by giving a function that performs one step: wanting to define a function of type (mu f -> a) we just say how, if we already have it on an approximation r of (mu f), we can extend it to an extra application of f, that is, from (r->a) we go to (f r -> a).
They you can extend the explanation to the recursion scheme.

Section 2.1:

"These type synonyms indicate ...": What's "abstract about these operations"? In what sense is "recursive call" and abstract operation?

"... variable r stands for abstract recursive values" -> "... variable r stands for abstract recursive arguments": by "recursive value" we usually indicate the result of the recursive call, here in the type a, while the object on which the recursive call is performed is called its argument.

"Since r universally quantified ..." -> "Since r is universally quantified ..."

"an handle" -> "a handle": but I find the use of the term "handle" here awkward.

"Note that ...": you should explain why it is important to note this fact.

"When the list has an element (N-case) ..." -> "When the list has an element (C-case) ..."

Note to Listing 1: "... lack of testing their formulation by write examples ..." -> "... lack of testing their formulation by examples ..."; and again, it is a bit strange to use "they" when you're the authors of that article.

Section 2.2:

"We do not rely ... and function definition general recursion ..." -> "We do not rely ... and function definition by the general recursion ..."
"nativly" -> "natively"

"Elimination of recursive values are only allowed ... " -> "Elimination of recursive values is only allowed ... "

Fix the grammar in the sentence beginning "For example, (Invers_* 5) ..."

"Note, in the Haskell definition ... Inverse_*." -> "Note, in the Haskell definition ... Inverse_{*->*}."

"From the type of phi, we know that result of iteration over e is a function" -> "From the type of phi, we know that the result of iteration over a HOAS term e is a function"

"The second equation ... provided by msfit handle the negative ..." -> "The second equation ... provided by msfit to handle the negative ..."

"caller" -> "call to"

Note 5: Do you mean that we should have an infinite list of variable names?
"formulated a co-recursiove" -> "formulate a co-recursive"

Section 3:
"to formulate of such a recursion" -> "to formulate such a recursion"

Section 4:
"it may be the case the values of" -> "it may be the case that the set of values of"

Section 5:
"The embedding is not as simple as the embedding of because ..." -> "The embedding is not as simple as the embedding of mu* because ..."
(In several places: the * should be subscript.)


----------------------- REVIEW 2 ---------------------
PAPER: 3
TITLE: Mendler-style recursion schemes for mixed-variant datatypes
AUTHORS: Ki Yung Ahn, Tim Sheard and Marcelo Fiore


----------- REVIEW -----------
This paper discusses the use of Mendler-style iteration for
mixed-variant datatypes, i.e. for recursive datatypes with
contravariant recursion. This is a very interesting topic relevant for
TYPES, with interesting bits of results but the writing should first
be highly improved. Not only there are a lot of typos and sentences
with shaky grammar, but, scientifically, the work looks more like a
work in progress than like a ready-to-publish paper.

Here are some examples of this work-in-progress state.

Section 5.2 on encoding msfits in System F_omega looks like the
authors are thinking aloud, with missing pieces (In'_*) which suggest
that the primary encoding (of mu'_*) might after all not be the right
one.

I'm unsure that sentences such as "For your information" are necessary
in general, as e.g. when discussion about KA := for all C, (A->C)->C
on page 11. On page 11, this is even more confusing that I did not see
an explanation of why K is useful for the system F_omega encoding.
Section 5.4 seems actually to end with a negative answer, requiring
that going in (eta) and out K (eta-1) is the identity, which is not
the case.

Here are examples of typos and fragile grammar.

Section 2.1: for defining msfit -> for defining mit
Listing 1: arguments f and a to Phi'_{*->*} missing in typing of auxiliary msfit.
Section 2.2: definitions general -> definitions using general
Section 2.2: restricted -> forbidden (?)
Top of page 7: mit -> msfit
p7: handle the negative -> to handle the negative
p7: to formulated -> to formulate
p8: to formulate of -> to formulate
Listing 6: from from -> from
p9: Redundancies between paragraphs "Coercion the other way round, ..." and
    "The coercion ..., but the coercion the other way is hard ..."
p10: ... equational properties ... which corresponds -> which correspond
p10: the embedding of because: a word is missing (mit?)
Section 5.1: F R X -> F R, in the type of mu*
p11: and mu'* is defined -> and that mu'* is defined
p24: TODO, TODO and TODO!

For the mispellings, please use a spell checker.