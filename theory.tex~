\section{Embedding \msfit{} into System~\Fw{}}\label{sec:theory}

We first review the embedding of Mendler-style iteration (\MIt{*}),
before discussing the embedding of Mendler-style iteration with
syntactic inverses (\msfit{*}). The embedding of Mendler-style iteration
consists of a polymorphic encoding of the fixpoint operator ($\mu_{*}$)
and term encodings (as functions) of its constructor ($\In{*}$)
and eliminator (\MIt{*}). We also show that one can derive
the equational properties of \MIt{*}, which correspond to
its Haskell definition discussed earlier.

Next, we discuss the embedding of \msfit{*}
into System~\Fw. The embedding of Mendler-style iteration with
syntactic inverses should consist of a polymorphic encodings of
the inverse-augmented fixpoint operator ($\mu_{*}'$) and term encodings of
its two constructors ($\textit{Inverse}_{*}$ and $\In{*}'$) and the eliminator
(\msfit{*}). The embedding is not as simple as the embedding of $\mu_{*}$
and $\MIt{*}$ because we have not found an \Fw-term that embeds $\In{*}'$.
However, we can embed each recursive type (\eg, \lstinline{Exp'}), when given
a concrete base structure (\eg, \lstinline{ExpF}), and deduce general rules
of how to embed inverse-augmented recursive types. We also show that
we can derive the expected equational properties for a specific example
(assuming that the section-retraction pair of the identity type is
equivalent to an identity function); the example we use is the untyped HOAS
(\lstinline{Exp'}) discussed in earlier sections.

Our discussion in this section is focused at kind $*$, but the embeddings for
Mendler-style recursion schemes at higher-kinds (\eg, \MIt{*\to*} and
\msfit{*\to*}) would be similar to the embeddings of them at kind $*$.
In fact, the term definitions for data constructors and eliminators
(\ie, recursion schemes) are always exactly the same regardless of their kinds.
Only their types become richer as we move to higher kinds, having more indices
applied to type constructors.

\subsection{The embedding of \MIt{*} and its equational property}
\label{sec:theory:mit}
Mendler-style iteration (\MIt{*}) can be embedded into System~\Fw\ as follows
\cite{AbeMatUus05,AhnShe11}:
\begin{align*}
&\mu_{*} ~=~ \lambda F^{* \to *}.\forall X^{*}.
		(\forall R^{*}.(R \to X) \to F R \to X) \to X
	\\
&\MIt{*} ~:~ \forall A^{*}.
	(\forall R^{*}.(R \to A) \to F R \to A) \to \mu_{*} F \to A \\
&\MIt{*}~\varphi~r ~=~ r~\varphi
	\\
&\In{*} ~:~\forall F^{* \to *}.F(\mu_{*} F) \to \mu_{*} F \\
&\In{*}~x~\varphi ~=~ \varphi~(\MIt{*}~\varphi)~x
\end{align*}
From the above embedding, one can derive the equational property of \MIt{*}
apparent in the Haskell definition (Listing~\ref{lst:reccomb}) as follows:
$\MIt{*}~\varphi~(\In{*}~x) = \In{*}~x~\varphi = \varphi~(\MIt{*}~\varphi)~x$.

\subsection{Embedding \msfit{*}}\label{sec:theory:embed}
We embed Mendler-style iteration with static inverses (\msfit{*})
into System \Fw\ as follows:\footnote{A Haskell transcription of this embedding
	appears in the previous work of Ahn and Sheard \cite{AhnShe11}.}
\begin{align*}
&\mu_{*}' ~=~ \lambda F^{* \to *}.\lambda A^{*}.
		K A + ((K A \to A) \to F(K A) \to A) \to A
	\\
&\msfit{*} ~:~ \forall A^{*}.
	(\forall R^{*}.(A \to R A) \to (R A \to A) \to F(R A) \to A) \to
	(\forall A^{*}.\mu_{*}' F A) \to A \\
&\msfit{*}~\varphi~r ~=~ r~\eta^{-1}~(\underbrace{\lambda f.f(\varphi~\eta)}_g)
\end{align*}
\begin{align*}
&\textit{Inverse}_{*} ~:~ \forall F^{*\to*}.\forall A^{*}.A \to \mu_{*}' F A \\
&\textit{Inverse}_{*}~a ~=~ \inL (\eta~a)
	\\
&\In{*}' ~:~ \forall F^{*\to*}.\forall A^{*}.F(\mu_{*}' F A) \to \mu_{*}' F A \\
&\In{*}'~x ~=~ \inR(\,\cdots\;\text{\color{blue}missing complete definition}\;\cdots)
\end{align*}
where $K = \lambda A^{*}.\forall X^{*}.(A \to X) \to X$,
whose constructor ($\eta$) and eliminator ($\eta^{-1}$) are:
\begin{align*}
\eta &~:~ A \to KA &
\eta^{-1} &~:~ KA \to A \\
\eta &~=~ \lambda a.\lambda f.f~a : A \to KA &
\eta^{-1} &~=~ \lambda \varphi.\varphi~\textit{id} : KA \to A
\end{align*}
$K$ is an embedding of the identity datatype (\lstinline{Id})
in Listing~\ref{lst:HOASeval} where its data constructor (\lstinline{MkId}) and
selector function (\lstinline{unId}) are embedded as $\eta$ and $\eta^{-1}$.
The purpose of using \lstinline{Id} in Listing~\ref{lst:HOASeval}, which is to
avoid higher-order unification in type inference, and the purpose of using $K$
here are not related but just a coincidence. For later use in the discussion,
we label the subterm $(\lambda f.f(\varphi~\eta))$ in the definition of
\msfit{*} above as $g$.

To understand the embedding of $\msfit{*}$, note that $r : \mu_{*}'$ and
that $\mu_{*}'$ is defined as a sum type ($+$), whose polymorphic embedding is
$A + B = \forall X^{*}.(A \to X) \to (B \to X) \to X$ and its two constructors
$\inL : \forall A^{*}.\forall B^{*}.A \to A + B$ (left injection) and
$\inR : \forall A^{*}.\forall B^{*}.B \to A + B$ (right injection) are
defined as $\inL = \lambda a.\lambda f_1.\lambda f_2.f_1\;a$ and
$\inR = \lambda b.\lambda f_1.\lambda f_2.f_2\;b$. The value $r$ selects
$\eta^{-1} : KA \to A$ to handle $\textit{Inverse}_{*}$-values and selects
$g$ to handle $\In{*}'$-values.

From the embedding of $\textit{Inverse}_{*}$, we can derive the equational
property of \msfit{*} over $\textit{Inverse}_{*}$-values, which is apparent in
the Haskell definition of \msfit{*} in Listing\;\ref{lst:reccomb}, as follows:
\[
\msfit{*}~\varphi~(\textit{Inverse}_{*} a) =
(\textit{Inverse}_{*}~a)~\eta^{-1}~g
= \inL~(\eta~a)~\eta^{-1}~g = \eta^{-1}(\eta~a) = a
\]
We leave it as an exercise for the reader to observe that
$\eta^{-1}(\eta~a) = a$.

Unfortunately, our embedding is not yet complete for $\In{*}'$.
We know that it must be in the form of a right injection using $\inR$,
but we were not able to come up with an embedding of $\In{*}'$
in its stand-alone form.\footnote{
	It was also the case in the previous work of Ahn and Sheard
	\cite{AhnShe11}, but was not clearly stated in the text.}
However, we were able to give embeddings for the constructor functions
of each individual recursive types,  when a particular base structure $F$
was given. For instance, we can embed the recursive type \lstinline{Exp'}
in Listing\;\ref{lst:HOASshow} and its two data constructors \textit{lam}
and \textit{app} into System~\Fw, as follows:\footnote{
	The use of $\In{*}'$ here is only a conceptual illustration. We do not
	have an embedding for the stand-alone $\In{*}'$ in System~\Fw.}
\begin{align*}
\textit{lam}&~:~\forall A^{*}.
		(\textit{Exp}'~A \to \textit{Exp}'~A) \to \textit{Exp}'~A \\
\textit{lam}&~f~=~\In{*}'(\textit{Lam}~f)
= \inR~(\underbrace{
	\lambda \varphi'.\varphi'~\eta^{-1}~
	(\overbrace{\textit{Lam}(\lambda y.\textit{lift}~\varphi'~(f(\inL~y))) }^v)\;
	}_w)
\end{align*}
\vspace*{-4ex}
\begin{align*}
\textit{app}&~:~\forall A^{*}.
		\textit{Exp}'~A \to \textit{Exp}'~A \to \textit{Exp}'~A \\
\textit{app}&~r_1~r_2 = \In{*}'(\textit{App}~r_1~r_2)
= \inR~(\underbrace{
		\lambda \varphi'.\varphi'~\eta^{-1}~
		(\textit{App}~(\lift~\varphi'~r_1)~(\lift~\varphi'~r_2))}_h)
\end{align*}
where \textit{lift} is defined as follows:
\begin{align*}
& \lift~:~(\forall A^{*}.(K A\to A)\to F(K A)\to A)\to \mu_{*}' F A\to K A\\
& \lift~\varphi'~r ~=~ r~\textit{id}~(\lambda z.\eta(z~\varphi'))
\end{align*}
We also label some of the subterms ($v$, $w$, and $h$)
in the embeddings of \textit{lam} and \textit{app} for
later use in the discussion.

Recall that $\mu_{*}'$ is a sum type. The \textit{lift} function converts
$(\mu_{*}'FA)$-values to $(KA)$-values when given a function
$\varphi' : \forall A^{*}.(KA \to A) \to F(K A) \to A$.
Observe that the type of $\varphi'$ matches with the partial application of
$\varphi$, the first argument of \textit{msfit}, applied to $\eta$ Since
$\varphi : \forall R^{*}.(A \to R A) \to (R A \to A) \to F(R A) \to A$
and $\eta : A \to K A$, we first instantiate $R$ with $K$ in the type of
$\varphi$, that is, $(A \to K A) \to (K A \to A) \to F(K A) \to A$.
Then, $(\varphi\eta) : (K A \to A) \to F(K A) \to A$, which matches
the type of $\varphi'$, the first argument of \textit{lift}.

We use \textit{lift} for the recursive values that are covariant,
in order to convert from $F(\mu_{*}'FA)$-structures, or $F(RA)$-structures,
to $F(KA)$-structures -- recall the type of the $varphi'$.
We lift recursive values $r_1$ and $r_2$, which both covariant,
in the embedding of \textit{app}. We also lift the value resulting from $f$,
whose return type is $F(\mu_{*}'FA)$, in the embedding of \textit{lam},
since the right-hand side of the function type is covariant.

For recursive values needed in contravariant positions, we simply left inject
answer values. For example, $y$ in the embedding of \textit{lam} has type $KA$
since we expect argument to $Lam$ be $KA \to KA$ because we expect $v : F(KA)$,
which is the second argument to be applied to $\varphi'$. To convert from
$(KA)$ to $\mu_{*}'FA$, we only need to left inject, that is, $(\inL~y)$,
which can be applied to $f : \mu_{*}'FA \to \mu_{*}'FA$.

We strongly believe that it is possible to give an embedding for
any recursive type in this way,\footnote{This is analogous to the situation
	that all regular recursive types can be embedded into System \F,
	but not the fixpoint operator $\mu_{*}$ itself.}
that is, by lifting $(\textit{lift}~\varphi)$ the recursive values in
covariant positions and by left injecting ($\inL$) the answer values\footnote{
	More precisely, $\eta$ applied answer values
	since the type we expect is not $A$ but $K A$.}
when recursive values are needed in contravariant positions.
Detailed investigations for the generlized procedure to derive embeddings for
$\mu'_{\kappa} F$ where $F : \kappa \to \kappa$ is left for future work.
In addition, it would be an interesting theoretical quest to search for
a calculus that can directly embed the constructor
$\In{*}' : \forall F^{*\to*}.\forall A^{*}.F(\mu'_{*} F A) \to \mu'_{*} F A$.

In the remainder of this section, we discuss the equational properties
of \msfit{*} over $\In{*}'$-values of the type \lstinline{Exp}. That is,
when \msfit{*} is applied to the values constructed either by \textit{app}
or by \textit{lam}.

%% \[ A \xrightarrow{\eta} KA \xrightarrow{\inL} \mu'_{*} = KA+((KA \to A) \to F(KA) \to A) \to A \]
\subsection{Equational properties of \msfit{*} over
	values constructed by \textit{lam}}
	\label{sec:theory:eqlam}
When applied to $(\textit{lam}~f)$, we expect \msfit{*} to
satisfy the following equation:
\begin{equation}
\msfit{*}~\varphi~(\textit{lam}~f)
\stackrel{?}{=} \varphi~\eta~\eta^{-1}
	~(\textit{Lam}(\lambda y.\eta(\msfit~\varphi~(f(\inL~y)))))
\label{eqn:msfitLam}
\end{equation}
We use $\eta$ to convert answer values of type $A$, resulting from
$(\msfit~\varphi~(f(\inL~y)))$, to values of type $KA$, since we need
$(\textit{Lam}(\lambda y.\eta(\msfit~\varphi~(f(\inL~y)))))$
to be of type $F(KA)$. The type of $\varphi$ expects a value of type $F(RA)$
as its third argument, where $R$ is a polymorphic type variable, which
instantiates to $K$ in the right-hand side of Equation~(\ref{eqn:msfitLam}).
We use $\inL$ to convert $y : KA$, to a value of $\mu_{*}' F A$
in order to apply it to $f : \mu_{*}' F A \to \mu_{*}' F A$.

The left-hand side of Equation~(\ref{eqn:msfitLam}) expands as below,
by expanding the definitions of \msfit{*}, $\inR$, $g$, and  $w$:
\begin{align*}
\msfit{*}~\varphi~(\textit{lam}~f)
&~=~ (\textit{lam}~f)~\eta^{-1}~g \\
&~=~ \inR~w~\eta^{-1}~g ~=~ g~w ~=~ w(\varphi\eta) \\
&~=~ \varphi~\eta~\eta^{-1}~
	(\textit{Lam}(\lambda y.\lift~(\varphi\eta)~(f(\inL~y)))) \\
&~=~ \varphi~\eta~\eta^{-1}~(\textit{Lam}(\lambda y.\psi))
\end{align*}
where $\psi = (f(\inL~y))~\textit{id}~(\lambda z.\eta(z(\varphi\eta)))$.
The resulting equation is similar in structure to the right-hand side of
Equation~(\ref{eqn:msfitLam}). Thus, justifying Equation~(\ref{eqn:msfitLam})
amounts to showing the equation below:
\begin{equation}
\psi \stackrel{?}{=} \eta(\msfit~\varphi~(f(\inL~y))))
\label{eqn:msfitPsi}
\end{equation}

The right-hand side of Equation~(\ref{eqn:msfitPsi}) expands as follows:
\[ \eta(\msfit~\varphi~(f(\inL~y)))) = \eta(\inL~\psi~\eta^{-1}~g)
	= \eta(\eta^{-1}~\psi)
\]
We need to show that $\psi=\eta(\eta^{-1}\psi)$ for any (type-correct) $\psi$.
That is, we need to consider $\eta \circ \eta^{-1}$,
is effectively equivalent to an identity over $KA$ for any type $A$.

\subsection{Equational properties of \msfit{*} over
	values constructed by \textit{app}}
	\label{sec:theory:eqapp}
When applied to $(\textit{app}~r_1~r_2)$, we expect \msfit{*} to
recurse on each of $r_1$ and $r_2$, as follows.
\begin{equation}
\msfit{*}~\varphi~(\textit{app}~r_1~r_2)
\stackrel{?}{=}
\varphi~\eta~\eta^{-1}~(\textit{App}~(\eta(\msfit{*}~\varphi~r_1))
					~(\eta(\msfit{*}~\varphi~r_2)))
\label{eqn:msfitApp}
\end{equation}
We need $\eta$ to convert answer values of type $A$ to values of type $KA$,
since we need $(\textit{App}~(\eta(\msfit{*}~\varphi~r_1))
					~(\eta(\msfit{*}~\varphi~r_2)))$
to have type $F(KA)$. The type of $\varphi$ expects a value of type $F(RA)$
as its third argument, where $R$ is a polymorphic type variable, which
instantiates to $K$ in the right-hand side of Equation~(\ref{eqn:msfitApp}).

The left-hand side of Equation~(\ref{eqn:msfitApp}) expands as below,
by expanding the definitions of \msfit{*}, $\inR$, $g$, and  $h$:
\begin{align*}
\msfit{*}~\varphi~(\textit{app}~x~y)
&~=~ (\textit{app}~r_1~r_2)~\eta^{-1}~g \\
&~=~ \inR~h~\eta^{-1}~g ~=~ g~h ~=~ h(\varphi~\eta) \\
&~=~ \varphi~\eta~\eta^{-1}
     ~(\textit{App}~(\lift~(\varphi\eta)~r_1)~(\lift~(\varphi\eta)~r_2))
\end{align*}
The resulting expression is similar in structure to the right-hand side of
Equation~(\ref{eqn:msfitApp}). Thus, justifying Equation~(\ref{eqn:msfitApp})
amounts to showing the equation below:
\begin{equation}
\eta(\msfit{*}~\varphi~r) \stackrel{?}{=} \lift~(\varphi\eta)~r
\label{eqn:msfitLift}
\end{equation}
When $r = \inR~z$, Equation~(\ref{eqn:msfitLift}) is justified as follows:
\begin{align*}
\eta(\msfit{*}~\varphi~(\inR~z))
&~=~ \eta(\inR~z~\eta^{-1}~g) ~=~ \eta(g~z) ~=~ \eta(z(\varphi\eta)) \\
&~=~ (\inR~z)~\textit{id}~(\lambda z.\eta(z.(\varphi\eta)))
 ~=~ \lift~(\varphi\eta)~(\inR~z)
\end{align*}
When $r = \inL~z$,
The left-hand side of Equation~(\ref{eqn:msfitLift}) expands as below
\[ \eta(\msfit{*}~\varphi~r) ~=~\eta(\inL~z~\eta^{-1}~g) = \eta(\eta^{-1}z)
\]
and the right-hand side of Equation~(\ref{eqn:msfitLift}) expands as below
\[ \lift~\varphi~(\inL~z)
   ~=~ (\inL~z)~\textit{id}~(\lambda z.\eta(z.(\varphi\eta)))
   ~=~ \textit{id}~z = z
\]
We need to show that $\eta(\eta^{-1}z) = z$ for any (type-correct) $z$.
That is, we need to consider $\eta \circ \eta^{-1}$
is effectively equivalent to an identity over $KA$ for any type $A$.


\subsection{Discussions on the section--retraction pair of $K$}
	\label{sec:theory:srpair}
The composition $\eta \circ \eta^{-1}$ is the section--retraction pair of $K$,
which is the impredicative encoding of the identity datatype. When designing
a type-safe language supporting datatypes, we typically expect
\emph{canonical forms lemma} to hold on datatypes; that is, any value
(or canonical form) of a datatype must be an application form lead by
one of the data constructors of that datatype. For instance,
when canonical forms lemma holds, values of the boolean datatype
\lstinline{data Bool  =  False | True} is either \lstinline{False}
or \lstinline{True} and values of the identity type
(\lstinline{data K a =  eta a}) always has the form \lstinline{eta v}
because \lstinline{eta} is the only data constructor of \lstinline{K}.
Then, 
$(\eta \circ \eta^{-1})(\eta\,t) = \eta((\eta^{-1}\circ\eta) t) = \eta\,t$.
Thus, it is safe to assume that $\eta \circ \eta^{-1}$ is effectively
equivalent to the identity function over $KA$ for any type $A$.

We do not expect it is possible to establish the equational properties of
\msfit{} purely within System \Fw; that is neither using
$\beta$($\eta$)-equivalence nor trying to canonical forms lemma on
over the impredicative encoding of the identity type seem promising.
Thus, we conclude that the \Fw-embedding of \msfit{} exhibits
its desired equational properties up to the section--retraction pair of $K$.
This is slightly different status from the \Fw-embedding of \MIt{}
discussed in \S\ref{sec:theory:mit}, which exhibits its desired
equational properties purely within System \Fw. We do not see this as
a problem because it is considered safe (\ie, maintain type preservation,
strong normalization, and logical consistency) to extend System \Fw\ with
non-recursive datatypes. For our purpose of showing termination of \msfit{},
we only need to extend System \Fw\ with just the identity datatype.

%% http://math.stackexchange.com/questions/73342/is-there-a-name-for-a-section-and-a-retraction-together

%% \[ \varphi \mapsto \varphi \mapsto \lambda f . f(\varphi~\textit{id}) \]
%% 
%% Section retraction since not same as $\varphi$


%% TODO other things: do we need to talk about codensity monad
%% $K_T = \lambda A^{*}.\forall X^{*}.(A \to T X) \to T X$
%% somewhere ??? maybe not necessary ...


